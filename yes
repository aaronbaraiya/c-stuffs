//function making below main, declration above main

#include <iostream>
using namespace std;

void funcOne(string fname);
void funcTwo(string day, int year);

int main() {

  funcOne("James");
  funcOne("BOB");

  funcTwo("jan", 2023);
  funcTwo("jan", 1985);
  
  return 0;
}

void funcOne(string fname) {
  cout << fname << endl;
}

void funcTwo(string day, int year) {
  cout << day << "  " << year << endl;
}


//array parameter function

#include <iostream>
using namespace std;

void arrayFunc(int myNum[4]) {
  for(int i = 0; i < 4; i++) {
    cout << " " << myNum[i];
  }
}


int main() {

  int numbers[4] = {0, 1, 2, 3};

  arrayFunc(numbers);
  
  return 0;
}



//messing with the above
#include <iostream>
using namespace std;

void arrayFunc(int myNum[4]) {
  for(int i = 0; i < 4; i++) {
    if(i == 2) {
      cout << "i =" << i;
    }
  }
}


int main() {

  int numbers[4] = {0, 1, 2, 3};

  arrayFunc(numbers);
  
  return 0;
}


//BILL CLINTONNNN
#include <iostream>
using namespace std;

class myClass {
  public:
    int calcSpace();
};

int myClass::calcSpace() {

  int tables, peoples;
  
  cin >> tables;
  cin >> peoples;

  if(peoples > tables) {
    return 69;
  }
  else {
    return 96;
  }
}

int main() {

  myClass obj;

  int num = obj.calcSpace();

  cout << num;
}


//CONSTRUCTORS WITH PARAMETERS:
#include <iostream>
using namespace std;

class myClass {
  public:

    int num1;
    string string1;
    
    myClass(int age, string name) {
      num1 = age;
      string1 = name;
    }
};


int main() {

  myClass obj(15, "BOB");
  myClass obj1(56, "E");

  cout << obj.num1 <<  " " << obj.string1 << endl;
  cout << obj1.num1 <<  " " << obj1.string1 << endl;
}

//ENDED IN CONSTRUCTORS:
#include <iostream>
using namespace std;

class myClass {
  public:

    string name;
    int age;
    myClass(string name1, int num1);
};

myClass::myClass(string name1, int num1) {
  name = name1;
  age = num1;
}

int main() {

  myClass obj("Aaron", 19);
  cout << obj.name << obj.age;
}
